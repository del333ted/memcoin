// Dependencies
import { Telegraf, ContextMessageUpdate } from 'telegraf'
import { IUser, getUser, getUserInfo } from '../models/user'
import { isReply } from './middleware'

export function setupTransfer(bot: Telegraf<ContextMessageUpdate>) {
  bot.hears(/./g, isReply, checkTransfer)
  bot.on('sticker', isReply, checkTransfer)
}

export class TransferError extends Error {
  type = 'TransferError'
  message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –í–∏—Ä—É—Å–∫–æ–∏–Ω–æ–≤'
}

export class NotEnoughCoinsError extends TransferError {
  type = 'NotEnoughCoinsError'
  message =
    '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –í–∏—Ä—É—Å–∫–æ–∏–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞'
}

export class SendSelfError extends TransferError {
  type = 'SendSelfError'
  message = `*–í–æ –∏–º—è –ª—é–±–≤–∏*, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—É—á—à–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –í–∏—Ä—É—Å–∫–æ–∏–Ω–∞–º–∏ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏!`
}

export async function transfer(sender: IUser, receiver: IUser, amount: number) {
  // Check if receiver is not the same as sender
  if (receiver.chatId === sender.chatId) throw new SendSelfError()
  // Check if enough balance
  if (sender.balance < amount) throw new NotEnoughCoinsError()
  // Remove balance from sender
  sender.balance -= amount
  sender = await sender.save()
  // Add balance to receiver
  receiver.balance += amount
  receiver = await receiver.save()
}

function isMinter(user: IUser) {
  // Check if minter
  return [576942226].indexOf(user.chatId) > -1
}

async function mint(user: IUser, amount: number) {
  // Add balance to user
  user.balance += amount
  return user.save()
}

async function checkTransfer(ctx: ContextMessageUpdate) {
  // Check if sticker
  let amount = 0
  if (ctx.message && ctx.message.sticker && ctx.message.sticker.emoji) {
    const allowedEmoji = ['ü¶†', '‚ò£Ô∏è', 'üëë']
    let allowed = false
    allowedEmoji.forEach(e => {
      if (ctx.message.sticker.emoji.indexOf(e) > -1) {
        allowed = true
      }
    })
    if (allowed) {
      amount = 1
    } else {
      return
    }
  } else if (ctx.message && ctx.message.text) {
    // Get number of coins to send
    amount = (ctx.message.text.match(/\+/g) || []).length
    const heartAmount = contains(ctx.message.text, 'ü¶†')
    const emojiAmount = contains(ctx.message.text, '‚ò£Ô∏è')
    const bowlAmount = contains(ctx.message.text, 'üëë')

    amount = amount + heartAmount + emojiAmount + bowlAmount
    // Check amount
    if (!amount) return
  } else {
    return
  }
  // Get sender
  let sender = await getUser(ctx.from.id)
  // Get receiver
  const receiver = await getUser(ctx.message.reply_to_message.from.id)
  try {
    // If minter, mint the coins first
    const senderIsMinter = isMinter(sender)
    if (senderIsMinter) {
      sender = await mint(sender, amount)
    }
    // Transfer coins
    await transfer(sender, receiver, amount)
    // Get receiver info
    const receiverInfo = await getUserInfo(ctx.telegram, receiver)
    // Check silent
    const chat = await getUser(ctx.chat.id)
    if (chat.silent) {
      return
    }
    // Reply
    const text = senderIsMinter
      ? `*${amount}* –í–∏—Ä—É—Å–∫–æ–∏–Ω–æ–≤ –±—ã–ª–æ –≤–æ–ª—à–µ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è *${receiverInfo.name}*. –í—Å–µ–≥–æ —É *${receiverInfo.name}* ${receiverInfo.balance} –í–∏—Ä—É—Å–∫–æ–∏–Ω–æ–≤.`
      : `*${amount}* –í–∏—Ä—É—Å–∫–æ–∏–Ω–æ–≤ –±—ã–ª–æ –ø–æ–¥–∞—Ä–µ–Ω–æ *${receiverInfo.name}*. –í—Å–µ–≥–æ —É *${receiverInfo.name}* ${receiverInfo.balance} –í–∏—Ä—É—Å–∫–æ–∏–Ω–æ–≤.`
    await ctx.replyWithMarkdown(text, {
      reply_to_message_id: ctx.message.message_id,
    })
  } catch (err) {
    await ctx.replyWithMarkdown(err.message, {
      reply_to_message_id: ctx.message.message_id,
    })
    return
  }
}

function contains(str: string, substr: string) {
  return str.split(substr).length - 1
}
